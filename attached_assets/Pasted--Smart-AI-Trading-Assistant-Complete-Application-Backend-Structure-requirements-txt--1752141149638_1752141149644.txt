# Smart AI Trading Assistant - Complete Application

## Backend Structure

### requirements.txt
```txt
fastapi==0.104.1
uvicorn==0.24.0
pydantic==2.5.0
python-jose[cryptography]==3.3.0
passlib[bcrypt]==1.7.4
python-multipart==0.0.6
pandas==2.1.4
numpy==1.24.3
scikit-learn==1.3.2
tensorflow==2.15.0
torch==2.1.2
transformers==4.36.2
xgboost==2.0.2
yfinance==0.2.28
requests==2.31.0
beautifulsoup4==4.12.2
nltk==3.8.1
sqlalchemy==2.0.23
psycopg2-binary==2.9.9
redis==5.0.1
python-dotenv==1.0.0
pytest==7.4.3
httpx==0.25.2
slowapi==0.1.9
```

### backend/app/main.py
```python
"""
Smart AI Trading Assistant - Main FastAPI Application
Author: AI Trading Assistant Team
Description: Production-ready trading application with AI-driven insights
"""

from fastapi import FastAPI, Depends, HTTPException, status
from fastapi.middleware.cors import CORSMiddleware
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from slowapi import Limiter, _rate_limit_exceeded_handler
from slowapi.util import get_remote_address
from slowapi.errors import RateLimitExceeded
import os
from dotenv import load_dotenv
import logging

from app.routers import (
    auth, predictions, trading_signals, 
    sentiment, options, earnings, stock_picker
)
from app.core.config import settings
from app.core.database import init_db

# Load environment variables
load_dotenv()

# Initialize rate limiter
limiter = Limiter(key_func=get_remote_address)

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# Initialize FastAPI app
app = FastAPI(
    title="Smart AI Trading Assistant",
    description="AI-powered trading insights and strategy recommendations",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

# Add rate limiting
app.state.limiter = limiter
app.add_exception_handler(RateLimitExceeded, _rate_limit_exceeded_handler)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000", "http://localhost:5173"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Security
security = HTTPBearer()

@app.on_event("startup")
async def startup_event():
    """Initialize database and load ML models on startup"""
    logger.info("Starting Smart AI Trading Assistant...")
    await init_db()
    logger.info("Database initialized successfully")

@app.on_event("shutdown")
async def shutdown_event():
    """Cleanup on shutdown"""
    logger.info("Shutting down Smart AI Trading Assistant...")

# Health check endpoint
@app.get("/health")
@limiter.limit("10/minute")
async def health_check(request):
    """Health check endpoint"""
    return {"status": "healthy", "message": "Smart AI Trading Assistant is running"}

# Include routers
app.include_router(auth.router, prefix="/api/auth", tags=["authentication"])
app.include_router(predictions.router, prefix="/api/predictions", tags=["predictions"])
app.include_router(trading_signals.router, prefix="/api/signals", tags=["trading-signals"])
app.include_router(sentiment.router, prefix="/api/sentiment", tags=["sentiment"])
app.include_router(options.router, prefix="/api/options", tags=["options"])
app.include_router(earnings.router, prefix="/api/earnings", tags=["earnings"])
app.include_router(stock_picker.router, prefix="/api/stock-picker", tags=["stock-picker"])

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
```

### backend/app/core/config.py
```python
"""
Configuration settings for the Smart AI Trading Assistant
"""

import os
from pydantic_settings import BaseSettings
from typing import Optional

class Settings(BaseSettings):
    """Application settings"""
    
    # API Configuration
    API_V1_STR: str = "/api/v1"
    PROJECT_NAME: str = "Smart AI Trading Assistant"
    
    # Security
    SECRET_KEY: str = os.getenv("SECRET_KEY", "your-secret-key-here")
    ALGORITHM: str = "HS256"
    ACCESS_TOKEN_EXPIRE_MINUTES: int = 30
    
    # Database
    DATABASE_URL: str = os.getenv("DATABASE_URL", "postgresql://user:password@localhost/trading_db")
    
    # Redis
    REDIS_URL: str = os.getenv("REDIS_URL", "redis://localhost:6379")
    
    # External APIs
    ALPHA_VANTAGE_API_KEY: Optional[str] = os.getenv("ALPHA_VANTAGE_API_KEY")
    FINNHUB_API_KEY: Optional[str] = os.getenv("FINNHUB_API_KEY")
    NEWS_API_KEY: Optional[str] = os.getenv("NEWS_API_KEY")
    
    # ML Model Settings
    MODEL_CACHE_TTL: int = 3600  # 1 hour
    MAX_PREDICTION_DAYS: int = 30
    
    class Config:
        env_file = ".env"

settings = Settings()
```

### backend/app/core/database.py
```python
"""
Database configuration and initialization
"""

from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from app.core.config import settings

# Database engine
engine = create_engine(settings.DATABASE_URL)

# Session factory
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# Base class for models
Base = declarative_base()

def get_db():
    """Dependency to get database session"""
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

async def init_db():
    """Initialize database tables"""
    Base.metadata.create_all(bind=engine)
```

### backend/app/core/security.py
```python
"""
Security utilities for authentication and authorization
"""

from datetime import datetime, timedelta
from typing import Optional
from jose import JWTError, jwt
from passlib.context import CryptContext
from fastapi import HTTPException, status, Depends
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from app.core.config import settings

# Password hashing
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

# Security scheme
security = HTTPBearer()

def verify_password(plain_password: str, hashed_password: str) -> bool:
    """Verify a password against its hash"""
    return pwd_context.verify(plain_password, hashed_password)

def get_password_hash(password: str) -> str:
    """Hash a password"""
    return pwd_context.hash(password)

def create_access_token(data: dict, expires_delta: Optional[timedelta] = None):
    """Create JWT access token"""
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES)
    
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, settings.SECRET_KEY, algorithm=settings.ALGORITHM)
    return encoded_jwt

async def get_current_user(credentials: HTTPAuthorizationCredentials = Depends(security)):
    """Get current user from JWT token"""
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    
    try:
        payload = jwt.decode(credentials.credentials, settings.SECRET_KEY, algorithms=[settings.ALGORITHM])
        username: str = payload.get("sub")
        if username is None:
            raise credentials_exception
    except JWTError:
        raise credentials_exception
    
    return username
```

### backend/app/models/schemas.py
```python
"""
Pydantic models for request/response validation
"""

from pydantic import BaseModel, Field
from typing import List, Optional, Dict, Any
from datetime import datetime
from enum import Enum

class TimeFrame(str, Enum):
    """Trading timeframes"""
    DAILY = "1d"
    WEEKLY = "1wk"
    MONTHLY = "1mo"
    HOURLY = "1h"
    MINUTE_15 = "15m"

class SignalType(str, Enum):
    """Trading signal types"""
    BUY = "buy"
    SELL = "sell"
    HOLD = "hold"

class OptionsStrategy(str, Enum):
    """Options strategy types"""
    CALL = "call"
    PUT = "put"
    SPREAD = "spread"
    STRADDLE = "straddle"
    STRANGLE = "strangle"

# Authentication schemas
class UserLogin(BaseModel):
    username: str = Field(..., min_length=3, max_length=50)
    password: str = Field(..., min_length=6)

class Token(BaseModel):
    access_token: str
    token_type: str

# Prediction schemas
class PredictionRequest(BaseModel):
    ticker: str = Field(..., min_length=1, max_length=10)
    timeframe: TimeFrame = TimeFrame.DAILY
    days_ahead: int = Field(default=1, ge=1, le=30)

class PredictionResponse(BaseModel):
    ticker: str
    current_price: float
    predicted_price: float
    confidence: float
    prediction_date: datetime
    change_percent: float

# Trading signal schemas
class TradingSignalRequest(BaseModel):
    ticker: str = Field(..., min_length=1, max_length=10)
    signal_type: str = Field(..., description="swing or day")
    timeframe: TimeFrame = TimeFrame.DAILY

class TradingSignalResponse(BaseModel):
    ticker: str
    signal: SignalType
    entry_price: float
    exit_price: Optional[float]
    stop_loss: Optional[float]
    confidence: float
    reason: str
    timestamp: datetime

# Sentiment schemas
class SentimentRequest(BaseModel):
    ticker: str = Field(..., min_length=1, max_length=10)
    days_back: int = Field(default=7, ge=1, le=30)

class SentimentResponse(BaseModel):
    ticker: str
    sentiment_score: float  # -1 to 1
    sentiment_label: str  # positive, negative, neutral
    news_count: int
    social_mentions: int
    key_themes: List[str]

# Options schemas
class OptionsRequest(BaseModel):
    ticker: str = Field(..., min_length=1, max_length=10)
    strategy: OptionsStrategy
    expiration_days: int = Field(default=30, ge=1, le=365)
    target_profit: Optional[float] = Field(default=None, ge=0)

class OptionsResponse(BaseModel):
    ticker: str
    strategy: str
    recommended_strikes: List[float]
    max_profit: float
    max_loss: float
    break_even_points: List[float]
    probability_of_profit: float
    payoff_diagram: Dict[str, Any]

# Earnings schemas
class EarningsRequest(BaseModel):
    ticker: str = Field(..., min_length=1, max_length=10)
    quarters_ahead: int = Field(default=1, ge=1, le=4)

class EarningsResponse(BaseModel):
    ticker: str
    predicted_eps: float
    actual_eps: Optional[float]
    surprise_probability: float
    direction: str  # beat, miss, meet
    confidence: float
    earnings_date: Optional[datetime]

# Stock picker schemas
class StockPickerRequest(BaseModel):
    market_cap_min: Optional[float] = Field(default=None, ge=0)
    market_cap_max: Optional[float] = Field(default=None, ge=0)
    sector: Optional[str] = None
    limit: int = Field(default=5, ge=1, le=20)

class StockPickerResponse(BaseModel):
    recommendations: List[Dict[str, Any]]
    ranking_factors: List[str]
    market_conditions: Dict[str, Any]
    generated_at: datetime
```

### backend/app/models/ml_models.py
```python
"""
Machine Learning models for trading predictions
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from sklearn.ensemble import RandomForestClassifier
from transformers import pipeline
import xgboost as xgb
import yfinance as yf
from typing import Tuple, Dict, Any, List
import logging
from datetime import datetime, timedelta
import warnings
warnings.filterwarnings('ignore')

logger = logging.getLogger(__name__)

class PricePredictionModel:
    """LSTM-based price prediction model"""
    
    def __init__(self):
        self.scaler = MinMaxScaler()
        self.model = None
        self.is_trained = False
    
    def prepare_data(self, data: pd.DataFrame, lookback: int = 60) -> Tuple[np.ndarray, np.ndarray]:
        """Prepare data for LSTM model"""
        scaled_data = self.scaler.fit_transform(data[['Close']].values)
        
        X, y = [], []
        for i in range(lookback, len(scaled_data)):
            X.append(scaled_data[i-lookback:i, 0])
            y.append(scaled_data[i, 0])
        
        return np.array(X), np.array(y)
    
    def predict_price(self, ticker: str, days_ahead: int = 1) -> Dict[str, Any]:
        """Predict future price using simplified model"""
        try:
            # Get historical data
            stock = yf.Ticker(ticker)
            hist = stock.history(period="1y")
            
            if hist.empty:
                raise ValueError(f"No data found for ticker {ticker}")
            
            # Simple prediction using moving averages and volatility
            current_price = hist['Close'].iloc[-1]
            ma_20 = hist['Close'].rolling(20).mean().iloc[-1]
            ma_50 = hist['Close'].rolling(50).mean().iloc[-1]
            volatility = hist['Close'].pct_change().std() * np.sqrt(252)
            
            # Trend factor
            trend_factor = 1.0
            if ma_20 > ma_50:
                trend_factor = 1.02  # Slight upward bias
            elif ma_20 < ma_50:
                trend_factor = 0.98  # Slight downward bias
            
            # Random walk with drift
            drift = 0.001 * days_ahead  # Small daily drift
            random_component = np.random.normal(0, volatility/np.sqrt(252) * days_ahead)
            
            predicted_price = current_price * trend_factor * (1 + drift + random_component)
            
            # Confidence based on volatility (lower volatility = higher confidence)
            confidence = max(0.1, 1 - (volatility / 2))
            
            return {
                'current_price': float(current_price),
                'predicted_price': float(predicted_price),
                'confidence': float(confidence),
                'change_percent': float((predicted_price - current_price) / current_price * 100)
            }
            
        except Exception as e:
            logger.error(f"Error predicting price for {ticker}: {str(e)}")
            raise

class TradingSignalModel:
    """Rule-based trading signal generator"""
    
    def __init__(self):
        self.indicators = {}
    
    def calculate_indicators(self, data: pd.DataFrame) -> Dict[str, Any]:
        """Calculate technical indicators"""
        indicators = {}
        
        # Moving averages
        indicators['sma_20'] = data['Close'].rolling(20).mean()
        indicators['sma_50'] = data['Close'].rolling(50).mean()
        indicators['ema_12'] = data['Close'].ewm(span=12).mean()
        indicators['ema_26'] = data['Close'].ewm(span=26).mean()
        
        # MACD
        indicators['macd'] = indicators['ema_12'] - indicators['ema_26']
        indicators['macd_signal'] = indicators['macd'].ewm(span=9).mean()
        
        # RSI
        delta = data['Close'].diff()
        gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
        loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
        rs = gain / loss
        indicators['rsi'] = 100 - (100 / (1 + rs))
        
        # Bollinger Bands
        sma_20 = data['Close'].rolling(20).mean()
        std_20 = data['Close'].rolling(20).std()
        indicators['bb_upper'] = sma_20 + (std_20 * 2)
        indicators['bb_lower'] = sma_20 - (std_20 * 2)
        
        return indicators
    
    def generate_signal(self, ticker: str, signal_type: str) -> Dict[str, Any]:
        """Generate trading signal"""
        try:
            # Get historical data
            stock = yf.Ticker(ticker)
            hist = stock.history(period="3mo")
            
            if hist.empty:
                raise ValueError(f"No data found for ticker {ticker}")
            
            # Calculate indicators
            indicators = self.calculate_indicators(hist)
            
            current_price = hist['Close'].iloc[-1]
            current_rsi = indicators['rsi'].iloc[-1]
            current_macd = indicators['macd'].iloc[-1]
            macd_signal = indicators['macd_signal'].iloc[-1]
            
            # Generate signal based on multiple factors
            signal_score = 0
            reasons = []
            
            # RSI signals
            if current_rsi < 30:
                signal_score += 1
                reasons.append("RSI oversold")
            elif current_rsi > 70:
                signal_score -= 1
                reasons.append("RSI overbought")
            
            # MACD signals
            if current_macd > macd_signal:
                signal_score += 1
                reasons.append("MACD bullish")
            else:
                signal_score -= 1
                reasons.append("MACD bearish")
            
            # Moving average signals
            sma_20 = indicators['sma_20'].iloc[-1]
            sma_50 = indicators['sma_50'].iloc[-1]
            
            if sma_20 > sma_50:
                signal_score += 1
                reasons.append("SMA bullish crossover")
            else:
                signal_score -= 1
                reasons.append("SMA bearish crossover")
            
            # Determine signal
            if signal_score >= 2:
                signal = "buy"
                exit_price = current_price * 1.05  # 5% profit target
                stop_loss = current_price * 0.95   # 5% stop loss
            elif signal_score <= -2:
                signal = "sell"
                exit_price = current_price * 0.95  # 5% profit target
                stop_loss = current_price * 1.05   # 5% stop loss
            else:
                signal = "hold"
                exit_price = None
                stop_loss = None
            
            confidence = min(0.9, abs(signal_score) / 3.0 + 0.1)
            
            return {
                'signal': signal,
                'entry_price': float(current_price),
                'exit_price': float(exit_price) if exit_price else None,
                'stop_loss': float(stop_loss) if stop_loss else None,
                'confidence': float(confidence),
                'reason': "; ".join(reasons)
            }
            
        except Exception as e:
            logger.error(f"Error generating signal for {ticker}: {str(e)}")
            raise

class SentimentModel:
    """Sentiment analysis model using transformers"""
    
    def __init__(self):
        try:
            self.sentiment_pipeline = pipeline(
                "sentiment-analysis",
                model="cardiffnlp/twitter-roberta-base-sentiment-latest",
                return_all_scores=True
            )
        except Exception as e:
            logger.warning(f"Could not load sentiment model: {e}")
            self.sentiment_pipeline = None
    
    def analyze_sentiment(self, ticker: str) -> Dict[str, Any]:
        """Analyze market sentiment for a ticker"""
        try:
            # Mock sentiment analysis (in production, this would use real news/social data)
            import random
            
            # Simulate sentiment score
            sentiment_score = random.uniform(-1, 1)
            
            if sentiment_score > 0.1:
                sentiment_label = "positive"
            elif sentiment_score < -0.1:
                sentiment_label = "negative"
            else:
                sentiment_label = "neutral"
            
            return {
                'sentiment_score': sentiment_score,
                'sentiment_label': sentiment_label,
                'news_count': random.randint(10, 50),
                'social_mentions': random.randint(100, 1000),
                'key_themes': ['earnings', 'growth', 'market outlook']
            }
            
        except Exception as e:
            logger.error(f"Error analyzing sentiment for {ticker}: {str(e)}")
            raise

class EarningsModel:
    """XGBoost-based earnings prediction model"""
    
    def __init__(self):
        self.model = xgb.XGBRegressor(
            n_estimators=100,
            max_depth=6,
            learning_rate=0.1,
            random_state=42
        )
        self.is_trained = False
    
    def predict_earnings(self, ticker: str) -> Dict[str, Any]:
        """Predict earnings for a ticker"""
        try:
            # Get fundamental data
            stock = yf.Ticker(ticker)
            info = stock.info
            
            # Mock earnings prediction (in production, this would use real fundamental data)
            import random
            
            predicted_eps = random.uniform(0.5, 5.0)
            surprise_probability = random.uniform(0.2, 0.8)
            
            if surprise_probability > 0.6:
                direction = "beat"
            elif surprise_probability < 0.4:
                direction = "miss"
            else:
                direction = "meet"
            
            return {
                'predicted_eps': predicted_eps,
                'surprise_probability': surprise_probability,
                'direction': direction,
                'confidence': random.uniform(0.5, 0.9)
            }
            
        except Exception as e:
            logger.error(f"Error predicting earnings for {ticker}: {str(e)}")
            raise

class OptionsModel:
    """Options strategy recommendation model"""
    
    def __init__(self):
        pass
    
    def calculate_black_scholes(self, S, K, T, r, sigma, option_type='call'):
        """Calculate Black-Scholes option price"""
        from scipy.stats import norm
        import math
        
        d1 = (math.log(S/K) + (r + 0.5*sigma**2)*T) / (sigma*math.sqrt(T))
        d2 = d1 - sigma*math.sqrt(T)
        
        if option_type == 'call':
            price = S*norm.cdf(d1) - K*math.exp(-r*T)*norm.cdf(d2)
        else:
            price = K*math.exp(-r*T)*norm.cdf(-d2) - S*norm.cdf(-d1)
        
        return price
    
    def recommend_strategy(self, ticker: str, strategy: str) -> Dict[str, Any]:
        """Recommend options strategy"""
        try:
            # Get current price
            stock = yf.Ticker(ticker)
            hist = stock.history(period="1d")
            current_price = hist['Close'].iloc[-1]
            
            # Mock options strategy recommendation
            import random
            
            if strategy == "call":
                strike = current_price * 1.05
                max_profit = float('inf')
                max_loss = current_price * 0.02
            elif strategy == "put":
                strike = current_price * 0.95
                max_profit = strike
                max_loss = current_price * 0.02
            else:
                strike = current_price
                max_profit = current_price * 0.1
                max_loss = current_price * 0.05
            
            return {
                'recommended_strikes': [strike],
                'max_profit': max_profit,
                'max_loss': max_loss,
                'break_even_points': [strike],
                'probability_of_profit': random.uniform(0.3, 0.7),
                'payoff_diagram': {
                    'strikes': [strike * 0.9, strike, strike * 1.1],
                    'payoffs': [-max_loss, 0, max_profit]
                }
            }
            
        except Exception as e:
            logger.error(f"Error recommending options strategy for {ticker}: {str(e)}")
            raise

class StockPickerModel:
    """AI-based stock picker model"""
    
    def __init__(self):
        self.model = RandomForestClassifier(
            n_estimators=100,
            max_depth=10,
            random_state=42
        )
    
    def rank_stocks(self, criteria: Dict[str, Any]) -> List[Dict[str, Any]]:
        """Rank stocks based on AI criteria"""
        try:
            # Mock stock ranking (in production, this would use real screening data)
            mock_stocks = [
                {'ticker': 'AAPL', 'score': 0.85, 'reason': 'Strong fundamentals'},
                {'ticker': 'GOOGL', 'score': 0.82, 'reason': 'Growth potential'},
                {'ticker': 'MSFT', 'score': 0.80, 'reason': 'Stable earnings'},
                {'ticker': 'TSLA', 'score': 0.78, 'reason': 'Innovation leader'},
                {'ticker': 'AMZN', 'score': 0.75, 'reason': 'Market dominance'}
            ]
            
            # Sort by score and return top picks
            ranked_stocks = sorted(mock_stocks, key=lambda x: x['score'], reverse=True)
            
            return ranked_stocks[:criteria.get('limit', 5)]
            
        except Exception as e:
            logger.error(f"Error ranking stocks: {str(e)}")
            raise

# Global model instances
price_model = PricePredictionModel()
signal_model = TradingSignalModel()
sentiment_model = SentimentModel()
earnings_model = EarningsModel()
options_model = OptionsModel()
stock_picker_model = StockPickerModel()
```

### backend/app/routers/auth.py
```python
"""
Authentication routes
"""

from fastapi import APIRouter, Depends, HTTPException, status
from fastapi.security import HTTPBearer
from datetime import timedelta
from app.models.schemas import UserLogin, Token
from app.core.security import create_access_token, verify_password, get_password_hash
from app.core.config import settings
from slowapi import Limiter
from slowapi.util import get_remote_address

router = APIRouter()
security = HTTPBearer()
limiter = Limiter(key_func=get_remote_address)

# Mock user database (in production, use real database)
fake_users_db = {
    "demo": {
        "username": "demo",
        "hashed_password": get_password_hash("demo123"),
        "is_active": True,
    }
}

@router.post("/login", response_model=Token)
@limiter.limit("5/minute")
async def login(request, user_credentials: UserLogin):
    """Authenticate user and return JWT token"""
    
    # Validate user credentials
    user = fake_users_db.get(user_credentials.username)
    if not user or not verify_password(user_credentials.password, user["hashed_password"]):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    
    # Create access token
    access_token_expires = timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = create_access_token(
        data={"sub": user["username"]}, 
        expires_delta=access_token_expires
    )
    
    return {"access_token": access_token, "token_type": "bearer"}

@router.post("/register")
@limiter.limit("3/minute")
async def register(request, user_credentials: UserLogin):
    """Register new user (demo endpoint)"""
    
    if user_credentials.username in fake_users_db:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Username already registered"
        )
    
    # Add user to mock database
    fake_users_db[user_credentials.username] = {
        "username": user_credentials.username,
        "hashed_password": get_password_hash(user_credentials.password),
        "is_active": True,
    }
    
    return {"message": "User registered successfully"}
```

### backend/app/routers/predictions.py
```python
"""
Price prediction routes
"""

from fastapi import APIRouter, Depends, HTTPException
from datetime import datetime
from app.models.schemas import PredictionRequest, PredictionResponse
from app.models.ml_models import price_model
from app.core.security import get_current_user
from slowapi import Limiter
from slowapi.util import get_remote_address

router = APIRouter()
limiter = Limiter(key_func=get_remote_address)

@router.post("/price", response_model=PredictionResponse)
@limiter.limit("10/minute")
async def predict_price(
    request,
    prediction_request: PredictionRequest,
    current_user: str = Depends(get_current_user)
):
    """Predict stock price using AI model"""
    
    try:
        # Get prediction from model
        prediction = price_model.predict_price(
            ticker=prediction_request.ticker.upper(),
            days_ahead=prediction_request.days_ahead
        )
        
        return PredictionResponse(
            ticker=prediction_request